#!/usr/bin/env python
# scalc is a script to do various slurm calculations.

import sys,os,subprocess

# Subroutines
# Main handles the selection of which calculation to run.
def main():
	print "What do you want to calculate?"
	print "1) Projected FairShare Based on New RawShare"
	print "2) Additional RawShare Need for FairShare Score"
	print "3) Projected Time to Reach FairShare Score Assuming No New Jobs"
	print "4) Projected Usage and Fairshare Based on Job"

	option = input("Option: ")

	if option == 1:
		FairshareRawshare()
	elif option == 2:
		print "Calculating Additional RawShare Need for FairShare Score"
	elif option == 3:
		print "Calculating Projected Time to Reach FairShare Score Assuming No New Jobs"
	elif option == 4:
		print "Calculating Projected Usage and Fairshare Based on Job"

# FairshareRawshare calculates the projected fairshare based on a given rawshare
# and current usage of an account.
def FairshareRawshare():
	print "We will now calculate the projected fairshare score based on the current usage of the Account and RawShare you specify."
	account = raw_input("First we need to know what account you want to calculate for: ")
	newrawshare = input("Now we need to know the new RawShare: ")

	try:
	        # sshare command we will use to get the data
		args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
		proc = subprocess.Popen(args, stdout=subprocess.PIPE)
	except:
		return
	else:
		for line in proc.stdout:
			(RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
			print account, "has a current RawShare of", RawShares, "and Fairshare of", Fairshare

			odysseyshare = float(RawShares)/float(NormShares)
			g = float(newrawshare)/odysseyshare

			f = pow(2.0,(-float(NormUsage)/g))

			print "With a new RawShare of", newrawshare, account, "would have a Fairshare of", f

			return	

# Actually start program
main()
