#!/usr/bin/env python
# scalc is a script to do various slurm calculations.

import sys,os,subprocess
from math import log, ceil

# Subroutines
# Main handles the selection of which calculation to run.
def main():
	print "What do you want to calculate?"
	print "1) Projected FairShare Based on New RawShare"
	print "2) Additional RawShare Need for FairShare Score"
	print "3) Projected Time to Reach FairShare Score Assuming No New Jobs"
	print "4) Projected Usage and Fairshare Based on Job"

	option = input("Option: ")

	if option == 1:
		FairshareRawshare()
	elif option == 2:
		RawshareFairshare()
	elif option == 3:
		Decay()
	elif option == 4:
		print "Calculating Projected Usage and Fairshare Based on Job"

# FairshareRawshare calculates the projected fairshare based on a given rawshare
# and current usage of an account.
def FairshareRawshare():
	print "We will now calculate the projected fairshare score based on the current usage of the Account and RawShare you specify."
	account = raw_input("First we need to know what account you want to calculate for: ")
	newrawshare = input("Now we need to know the new RawShare: ")

	try:
	        # sshare command we will use to get the data
		args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
		proc = subprocess.Popen(args, stdout=subprocess.PIPE)
	except:
		return
	else:
		for line in proc.stdout:
			(RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
			print account, "has a current RawShare of", RawShares, "and Fairshare of", Fairshare

			odysseyshare = float(RawShares)/float(NormShares)
			g = float(newrawshare)/odysseyshare

			f = pow(2.0,(-float(NormUsage)/g))

			print "With a new RawShare of", newrawshare, account, "would have a Fairshare of", f

			return

# RawshareFairshare calculates the Rawshare required to reach a given fairshare score
# if the current usage of the account remains constant
def RawshareFairshare():
	print "We will now calculate the Rawshares required to reach a specific Fairshare based on the current usage of an Account you specify."
	account = raw_input("First we need to know what account you want to calculate for: ")
	newfairshare = raw_input("Now we need to know the target Fairshare: ")

	try:
	        # sshare command we will use to get the data
		args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
		proc = subprocess.Popen(args, stdout=subprocess.PIPE)
	except:
		return
	else:
		for line in proc.stdout:
			(RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
			print account, "has a current RawShare of", RawShares, "and Fairshare of", Fairshare
			
			newfairshare = min(float(newfairshare),0.99999)
			odysseyshare = float(RawShares)/float(NormShares)
			r = -float(NormUsage)*odysseyshare/log(float(newfairshare),2.0)

			print "For a fairshare of", newfairshare, account, "will need a RawShare of", int(ceil(r))

			return

# Decay calculates how long it would take to reach a specific fairshare if the user stopped running immediately.
def Decay():
	print "We will now calculate how long it will take for the specified account to reach the specified fairshare if no new jobs are submitted"
	account = raw_input("First we need to know what account you want to calculate for: ")
	newfairshare = raw_input("Now we need to know the target Fairshare: ")

	try:
	        # sshare command we will use to get the data
		args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
		proc = subprocess.Popen(args, stdout=subprocess.PIPE)
	except:
		return
	else:
		for line in proc.stdout:
			(RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
			print account, "has a current Usage of", RawUsage, "and Fairshare of", Fairshare
			
			newfairshare = min(float(newfairshare),0.99999)
			# c is the TRES/sec of the cluster
			c = 160000.0
			t = 1.0/c*(-float(RawUsage)/(float(NormShares)*log(float(newfairshare),2.0))-float(RawUsage)/float(NormUsage))

			t = t/(24.0*60.0*60.0)

			print "For a fairshare of", newfairshare, account, "will need", t, "days"

			return


# Actually start program
main()
